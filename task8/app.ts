import dotenv from "dotenv";
import path from "path";
import fs from "fs";
import { OpenAIService } from "../services/OpenAIService";

// Load environment variables
dotenv.config({ path: path.resolve(__dirname, "../.env") });

/**
 * Fetches the robot description from the API.
 */
import axios from "axios";

async function fetchRobotDescription(apiKey: string): Promise<string> {
  const url = `https://c3ntrala.ag3nts.org/data/${apiKey}/robotid.json`;
  try {
    const response = await axios.get(url, { timeout: 10000 });
    if (typeof response.data === "string") {
      return response.data;
    }
    if (response.data && typeof response.data.description === "string") {
      return response.data.description;
    }
    throw new Error("Unexpected response format");
  } catch (error) {
    console.error("Error fetching robot description:", error);
    throw new Error("Failed to fetch robot description");
  }
}



/**
 * Uploads an image from URL to Imgur and returns the Imgur URL.
 */
async function uploadImageToImgur(imageUrl: string): Promise<string> {
  try {
    console.log("Downloading image from DALL-E to upload to Imgur...");
    // Fetch the image data from the URL
    const imageResponse = await axios.get(imageUrl, {
      responseType: 'arraybuffer'
    });
    
    // Save image locally
    await saveImageLocally(imageResponse.data);
    
    // Prepare data for Imgur API
    const base64Image = Buffer.from(imageResponse.data, 'binary').toString('base64');
    
    // Upload to Imgur
    const imgurResponse = await axios.post('https://api.imgur.com/3/image', {
      image: base64Image,
      type: 'base64'
    }, {
      headers: {
        'Authorization': `Client-ID ${process.env.IMGUR_CLIENT_ID}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (imgurResponse.data && imgurResponse.data.success && imgurResponse.data.data && imgurResponse.data.data.link) {
      console.log("Successfully uploaded image to Imgur");
      console.log("Image URL:", imgurResponse.data.data.link);
      return imgurResponse.data.data.link;
    }
    
    throw new Error("Failed to get image link from Imgur response");
  } catch (error) {
    console.error("Error uploading to Imgur:", error);
    throw new Error("Failed to upload image to Imgur");
  }
}

/**
 * Generates a robot image using DALL-E 3 (via OpenAIService).
 */
/**
 * Saves image data locally to zad8 folder
 */
async function saveImageLocally(imageData: Buffer): Promise<string> {
  try {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `robot-${timestamp}.png`;
    const filePath = path.join(__dirname, filename);
    
    await fs.promises.writeFile(filePath, imageData);
    console.log(`Image saved locally to: ${filePath}`);
    return filePath;
  } catch (error) {
    console.error("Error saving image locally:", error);
    throw new Error("Failed to save image locally");
  }
}

async function generateRobotImage(description: string): Promise<string> {
  const openAIService = new OpenAIService();
  const prompt = `Stwórz szczegółową, realistyczną grafikę przedstawiającą robota zaobserwowanego w fabryce. Opis robota: ${description}. Tło: wnętrze nowoczesnej fabryki. Format: PNG, rozdzielczość 1024x1024px.`;
  try {
    const dalleUrl = await openAIService.generateImage({
      prompt,
      model: "dall-e-3",
      size: "1024x1024",
      quality: "standard",
      style: "vivid",
    });
    
    console.log("Image generated by DALL-E, uploading to Imgur...");
    // Upload the DALL-E image to Imgur
    return await uploadImageToImgur(dalleUrl);
  } catch (error) {
    console.error("Error generating robot image:", error);
    throw new Error("Failed to generate robot image");
  }
}

/**
 * Reports the image URL to the Central API.
 */
async function reportImageUrl(apiKey: string, imageUrl: string): Promise<void> {
  const payload = {
    task: "robotid",
    apikey: apiKey,
    answer: imageUrl,
  };
  try {
    const response = await axios.post("https://c3ntrala.ag3nts.org/report", payload, {
      headers: { "Content-Type": "application/json" },
      timeout: 10000,
    });
    console.log("Report sent. Response:", response.data);
  } catch (error) {
    console.error("Error reporting image URL:", error);
    throw new Error("Failed to report image URL");
  }
}

/**
 * Main execution function.
 */
async function main() {
  const apiKey = process.env.PERSONAL_API_KEY;
  if (!apiKey) {
    throw new Error("PERSONAL_API_KEY not found in environment variables");
  }

  const description = await fetchRobotDescription(apiKey);
  const imageUrl = await generateRobotImage(description);
  await reportImageUrl(apiKey, imageUrl);
}

if (require.main === module) {
  main().catch((err) => {
    console.error("Fatal error:", err);
    process.exit(1);
  });
}
